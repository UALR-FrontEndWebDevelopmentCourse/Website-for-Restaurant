{"ast":null,"code":"// package.json\nvar version = \"1.1.14\";\n\n// packages/core/src/maths.ts\nfunction clamp(min, input, max) {\n  return Math.max(min, Math.min(input, max));\n}\nfunction lerp(x, y, t) {\n  return (1 - t) * x + t * y;\n}\nfunction damp(x, y, lambda, deltaTime) {\n  return lerp(x, y, 1 - Math.exp(-lambda * deltaTime));\n}\nfunction modulo(n, d) {\n  return (n % d + d) % d;\n}\n\n// packages/core/src/animate.ts\nvar Animate = class {\n  isRunning = false;\n  value = 0;\n  from = 0;\n  to = 0;\n  currentTime = 0;\n  // These are instanciated in the fromTo method\n  lerp;\n  duration;\n  easing;\n  onUpdate;\n  /**\n   * Advance the animation by the given delta time\n   *\n   * @param deltaTime - The time in seconds to advance the animation\n   */\n  advance(deltaTime) {\n    if (!this.isRunning) return;\n    let completed = false;\n    if (this.duration && this.easing) {\n      this.currentTime += deltaTime;\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1);\n      completed = linearProgress >= 1;\n      const easedProgress = completed ? 1 : this.easing(linearProgress);\n      this.value = this.from + (this.to - this.from) * easedProgress;\n    } else if (this.lerp) {\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime);\n      if (Math.round(this.value) === this.to) {\n        this.value = this.to;\n        completed = true;\n      }\n    } else {\n      this.value = this.to;\n      completed = true;\n    }\n    if (completed) {\n      this.stop();\n    }\n    this.onUpdate?.(this.value, completed);\n  }\n  /** Stop the animation */\n  stop() {\n    this.isRunning = false;\n  }\n  /**\n   * Set up the animation from a starting value to an ending value\n   * with optional parameters for lerping, duration, easing, and onUpdate callback\n   *\n   * @param from - The starting value\n   * @param to - The ending value\n   * @param options - Options for the animation\n   */\n  fromTo(from, to, {\n    lerp: lerp2,\n    duration,\n    easing,\n    onStart,\n    onUpdate\n  }) {\n    this.from = this.value = from;\n    this.to = to;\n    this.lerp = lerp2;\n    this.duration = duration;\n    this.easing = easing;\n    this.currentTime = 0;\n    this.isRunning = true;\n    onStart?.();\n    this.onUpdate = onUpdate;\n  }\n};\n\n// packages/core/src/debounce.ts\nfunction debounce(callback, delay) {\n  let timer;\n  return function (...args) {\n    let context = this;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = void 0;\n      callback.apply(context, args);\n    }, delay);\n  };\n}\n\n// packages/core/src/dimensions.ts\nvar Dimensions = class {\n  constructor(wrapper, content, {\n    autoResize = true,\n    debounce: debounceValue = 250\n  } = {}) {\n    this.wrapper = wrapper;\n    this.content = content;\n    if (autoResize) {\n      this.debouncedResize = debounce(this.resize, debounceValue);\n      if (this.wrapper instanceof Window) {\n        window.addEventListener(\"resize\", this.debouncedResize, false);\n      } else {\n        this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize);\n        this.wrapperResizeObserver.observe(this.wrapper);\n      }\n      this.contentResizeObserver = new ResizeObserver(this.debouncedResize);\n      this.contentResizeObserver.observe(this.content);\n    }\n    this.resize();\n  }\n  width = 0;\n  height = 0;\n  scrollHeight = 0;\n  scrollWidth = 0;\n  // These are instanciated in the constructor as they need information from the options\n  debouncedResize;\n  wrapperResizeObserver;\n  contentResizeObserver;\n  destroy() {\n    this.wrapperResizeObserver?.disconnect();\n    this.contentResizeObserver?.disconnect();\n    if (this.wrapper === window && this.debouncedResize) {\n      window.removeEventListener(\"resize\", this.debouncedResize, false);\n    }\n  }\n  resize = () => {\n    this.onWrapperResize();\n    this.onContentResize();\n  };\n  onWrapperResize = () => {\n    if (this.wrapper instanceof Window) {\n      this.width = window.innerWidth;\n      this.height = window.innerHeight;\n    } else {\n      this.width = this.wrapper.clientWidth;\n      this.height = this.wrapper.clientHeight;\n    }\n  };\n  onContentResize = () => {\n    if (this.wrapper instanceof Window) {\n      this.scrollHeight = this.content.scrollHeight;\n      this.scrollWidth = this.content.scrollWidth;\n    } else {\n      this.scrollHeight = this.wrapper.scrollHeight;\n      this.scrollWidth = this.wrapper.scrollWidth;\n    }\n  };\n  get limit() {\n    return {\n      x: this.scrollWidth - this.width,\n      y: this.scrollHeight - this.height\n    };\n  }\n};\n\n// packages/core/src/emitter.ts\nvar Emitter = class {\n  events = {};\n  /**\n   * Emit an event with the given data\n   * @param event Event name\n   * @param args Data to pass to the event handlers\n   */\n  emit(event, ...args) {\n    let callbacks = this.events[event] || [];\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i]?.(...args);\n    }\n  }\n  /**\n   * Add a callback to the event\n   * @param event Event name\n   * @param cb Callback function\n   * @returns Unsubscribe function\n   */\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb]);\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i);\n    };\n  }\n  /**\n   * Remove a callback from the event\n   * @param event Event name\n   * @param callback Callback function\n   */\n  off(event, callback) {\n    this.events[event] = this.events[event]?.filter(i => callback !== i);\n  }\n  /**\n   * Remove all event listeners and clean up\n   */\n  destroy() {\n    this.events = {};\n  }\n};\n\n// packages/core/src/virtual-scroll.ts\nvar LINE_HEIGHT = 100 / 6;\nvar listenerOptions = {\n  passive: false\n};\nvar VirtualScroll = class {\n  constructor(element, options = {\n    wheelMultiplier: 1,\n    touchMultiplier: 1\n  }) {\n    this.element = element;\n    this.options = options;\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n    this.onWindowResize();\n    this.element.addEventListener(\"wheel\", this.onWheel, listenerOptions);\n    this.element.addEventListener(\"touchstart\", this.onTouchStart, listenerOptions);\n    this.element.addEventListener(\"touchmove\", this.onTouchMove, listenerOptions);\n    this.element.addEventListener(\"touchend\", this.onTouchEnd, listenerOptions);\n  }\n  touchStart = {\n    x: 0,\n    y: 0\n  };\n  lastDelta = {\n    x: 0,\n    y: 0\n  };\n  window = {\n    width: 0,\n    height: 0\n  };\n  emitter = new Emitter();\n  /**\n   * Add an event listener for the given event and callback\n   *\n   * @param event Event name\n   * @param callback Callback function\n   */\n  on(event, callback) {\n    return this.emitter.on(event, callback);\n  }\n  /** Remove all event listeners and clean up */\n  destroy() {\n    this.emitter.destroy();\n    window.removeEventListener(\"resize\", this.onWindowResize, false);\n    this.element.removeEventListener(\"wheel\", this.onWheel, listenerOptions);\n    this.element.removeEventListener(\"touchstart\", this.onTouchStart, listenerOptions);\n    this.element.removeEventListener(\"touchmove\", this.onTouchMove, listenerOptions);\n    this.element.removeEventListener(\"touchend\", this.onTouchEnd, listenerOptions);\n  }\n  /**\n   * Event handler for 'touchstart' event\n   *\n   * @param event Touch event\n   */\n  onTouchStart = event => {\n    const {\n      clientX,\n      clientY\n    } = event.targetTouches ? event.targetTouches[0] : event;\n    this.touchStart.x = clientX;\n    this.touchStart.y = clientY;\n    this.lastDelta = {\n      x: 0,\n      y: 0\n    };\n    this.emitter.emit(\"scroll\", {\n      deltaX: 0,\n      deltaY: 0,\n      event\n    });\n  };\n  /** Event handler for 'touchmove' event */\n  onTouchMove = event => {\n    const {\n      clientX,\n      clientY\n    } = event.targetTouches ? event.targetTouches[0] : event;\n    const deltaX = -(clientX - this.touchStart.x) * this.options.touchMultiplier;\n    const deltaY = -(clientY - this.touchStart.y) * this.options.touchMultiplier;\n    this.touchStart.x = clientX;\n    this.touchStart.y = clientY;\n    this.lastDelta = {\n      x: deltaX,\n      y: deltaY\n    };\n    this.emitter.emit(\"scroll\", {\n      deltaX,\n      deltaY,\n      event\n    });\n  };\n  onTouchEnd = event => {\n    this.emitter.emit(\"scroll\", {\n      deltaX: this.lastDelta.x,\n      deltaY: this.lastDelta.y,\n      event\n    });\n  };\n  /** Event handler for 'wheel' event */\n  onWheel = event => {\n    let {\n      deltaX,\n      deltaY,\n      deltaMode\n    } = event;\n    const multiplierX = deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.width : 1;\n    const multiplierY = deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.height : 1;\n    deltaX *= multiplierX;\n    deltaY *= multiplierY;\n    deltaX *= this.options.wheelMultiplier;\n    deltaY *= this.options.wheelMultiplier;\n    this.emitter.emit(\"scroll\", {\n      deltaX,\n      deltaY,\n      event\n    });\n  };\n  onWindowResize = () => {\n    this.window = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  };\n};\n\n// packages/core/src/lenis.ts\nvar Lenis = class {\n  _isScrolling = false;\n  // true when scroll is animating\n  _isStopped = false;\n  // true if user should not be able to scroll - enable/disable programmatically\n  _isLocked = false;\n  // same as isStopped but enabled/disabled when scroll reaches target\n  _preventNextNativeScrollEvent = false;\n  _resetVelocityTimeout = null;\n  /**\n   * Whether or not the user is touching the screen\n   */\n  isTouching;\n  /**\n   * The time in ms since the lenis instance was created\n   */\n  time = 0;\n  /**\n   * User data that will be forwarded through the scroll event\n   *\n   * @example\n   * lenis.scrollTo(100, {\n   *   userData: {\n   *     foo: 'bar'\n   *   }\n   * })\n   */\n  userData = {};\n  /**\n   * The last velocity of the scroll\n   */\n  lastVelocity = 0;\n  /**\n   * The current velocity of the scroll\n   */\n  velocity = 0;\n  /**\n   * The direction of the scroll\n   */\n  direction = 0;\n  /**\n   * The options passed to the lenis instance\n   */\n  options;\n  /**\n   * The target scroll value\n   */\n  targetScroll;\n  /**\n   * The animated scroll value\n   */\n  animatedScroll;\n  // These are instanciated here as they don't need information from the options\n  animate = new Animate();\n  emitter = new Emitter();\n  // These are instanciated in the constructor as they need information from the options\n  dimensions;\n  // This is not private because it's used in the Snap class\n  virtualScroll;\n  constructor({\n    wrapper = window,\n    content = document.documentElement,\n    eventsTarget = wrapper,\n    smoothWheel = true,\n    syncTouch = false,\n    syncTouchLerp = 0.075,\n    touchInertiaMultiplier = 35,\n    duration,\n    // in seconds\n    easing = t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n    lerp: lerp2 = 0.1,\n    infinite = false,\n    orientation = \"vertical\",\n    // vertical, horizontal\n    gestureOrientation = \"vertical\",\n    // vertical, horizontal, both\n    touchMultiplier = 1,\n    wheelMultiplier = 1,\n    autoResize = true,\n    prevent,\n    virtualScroll,\n    overscroll = true,\n    __experimental__naiveDimensions = false\n  } = {}) {\n    window.lenisVersion = version;\n    if (!wrapper || wrapper === document.documentElement || wrapper === document.body) {\n      wrapper = window;\n    }\n    this.options = {\n      wrapper,\n      content,\n      eventsTarget,\n      smoothWheel,\n      syncTouch,\n      syncTouchLerp,\n      touchInertiaMultiplier,\n      duration,\n      easing,\n      lerp: lerp2,\n      infinite,\n      gestureOrientation,\n      orientation,\n      touchMultiplier,\n      wheelMultiplier,\n      autoResize,\n      prevent,\n      virtualScroll,\n      overscroll,\n      __experimental__naiveDimensions\n    };\n    this.dimensions = new Dimensions(wrapper, content, {\n      autoResize\n    });\n    this.updateClassName();\n    this.targetScroll = this.animatedScroll = this.actualScroll;\n    this.options.wrapper.addEventListener(\"scroll\", this.onNativeScroll, false);\n    this.options.wrapper.addEventListener(\"pointerdown\", this.onPointerDown, false);\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\n      touchMultiplier,\n      wheelMultiplier\n    });\n    this.virtualScroll.on(\"scroll\", this.onVirtualScroll);\n  }\n  /**\n   * Destroy the lenis instance, remove all event listeners and clean up the class name\n   */\n  destroy() {\n    this.emitter.destroy();\n    this.options.wrapper.removeEventListener(\"scroll\", this.onNativeScroll, false);\n    this.options.wrapper.removeEventListener(\"pointerdown\", this.onPointerDown, false);\n    this.virtualScroll.destroy();\n    this.dimensions.destroy();\n    this.cleanUpClassName();\n  }\n  on(event, callback) {\n    return this.emitter.on(event, callback);\n  }\n  off(event, callback) {\n    return this.emitter.off(event, callback);\n  }\n  setScroll(scroll) {\n    if (this.isHorizontal) {\n      this.rootElement.scrollLeft = scroll;\n    } else {\n      this.rootElement.scrollTop = scroll;\n    }\n  }\n  onPointerDown = event => {\n    if (event.button === 1) {\n      this.reset();\n    }\n  };\n  onVirtualScroll = data => {\n    if (typeof this.options.virtualScroll === \"function\" && this.options.virtualScroll(data) === false) return;\n    const {\n      deltaX,\n      deltaY,\n      event\n    } = data;\n    this.emitter.emit(\"virtual-scroll\", {\n      deltaX,\n      deltaY,\n      event\n    });\n    if (event.ctrlKey) return;\n    if (event.lenisStopPropagation) return;\n    const isTouch = event.type.includes(\"touch\");\n    const isWheel = event.type.includes(\"wheel\");\n    this.isTouching = event.type === \"touchstart\" || event.type === \"touchmove\";\n    const isTapToStop = this.options.syncTouch && isTouch && event.type === \"touchstart\" && !this.isStopped && !this.isLocked;\n    if (isTapToStop) {\n      this.reset();\n      return;\n    }\n    const isClick = deltaX === 0 && deltaY === 0;\n    const isUnknownGesture = this.options.gestureOrientation === \"vertical\" && deltaY === 0 || this.options.gestureOrientation === \"horizontal\" && deltaX === 0;\n    if (isClick || isUnknownGesture) {\n      return;\n    }\n    let composedPath = event.composedPath();\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement));\n    const prevent = this.options.prevent;\n    if (!!composedPath.find(node => node instanceof HTMLElement && (typeof prevent === \"function\" && prevent?.(node) || node.hasAttribute?.(\"data-lenis-prevent\") || isTouch && node.hasAttribute?.(\"data-lenis-prevent-touch\") || isWheel && node.hasAttribute?.(\"data-lenis-prevent-wheel\")))) return;\n    if (this.isStopped || this.isLocked) {\n      event.preventDefault();\n      return;\n    }\n    const isSmooth = this.options.syncTouch && isTouch || this.options.smoothWheel && isWheel;\n    if (!isSmooth) {\n      this.isScrolling = \"native\";\n      this.animate.stop();\n      event.lenisStopPropagation = true;\n      return;\n    }\n    let delta = deltaY;\n    if (this.options.gestureOrientation === \"both\") {\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX;\n    } else if (this.options.gestureOrientation === \"horizontal\") {\n      delta = deltaX;\n    }\n    if (!this.options.overscroll || this.options.infinite || this.options.wrapper !== window && (this.animatedScroll > 0 && this.animatedScroll < this.limit || this.animatedScroll === 0 && deltaY > 0 || this.animatedScroll === this.limit && deltaY < 0)) {\n      event.lenisStopPropagation = true;\n    }\n    event.preventDefault();\n    const syncTouch = isTouch && this.options.syncTouch;\n    const isTouchEnd = isTouch && event.type === \"touchend\";\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5;\n    if (hasTouchInertia) {\n      delta = this.velocity * this.options.touchInertiaMultiplier;\n    }\n    this.scrollTo(this.targetScroll + delta, {\n      programmatic: false,\n      ...(syncTouch ? {\n        lerp: hasTouchInertia ? this.options.syncTouchLerp : 1\n      } : {\n        lerp: this.options.lerp,\n        duration: this.options.duration,\n        easing: this.options.easing\n      })\n    });\n  };\n  /**\n   * Force lenis to recalculate the dimensions\n   */\n  resize() {\n    this.dimensions.resize();\n    this.animatedScroll = this.targetScroll = this.actualScroll;\n    this.emit();\n  }\n  emit() {\n    this.emitter.emit(\"scroll\", this);\n  }\n  onNativeScroll = () => {\n    if (this._resetVelocityTimeout !== null) {\n      clearTimeout(this._resetVelocityTimeout);\n      this._resetVelocityTimeout = null;\n    }\n    if (this._preventNextNativeScrollEvent) {\n      this._preventNextNativeScrollEvent = false;\n      return;\n    }\n    if (this.isScrolling === false || this.isScrolling === \"native\") {\n      const lastScroll = this.animatedScroll;\n      this.animatedScroll = this.targetScroll = this.actualScroll;\n      this.lastVelocity = this.velocity;\n      this.velocity = this.animatedScroll - lastScroll;\n      this.direction = Math.sign(this.animatedScroll - lastScroll);\n      this.isScrolling = \"native\";\n      this.emit();\n      if (this.velocity !== 0) {\n        this._resetVelocityTimeout = setTimeout(() => {\n          this.lastVelocity = this.velocity;\n          this.velocity = 0;\n          this.isScrolling = false;\n          this.emit();\n        }, 400);\n      }\n    }\n  };\n  reset() {\n    this.isLocked = false;\n    this.isScrolling = false;\n    this.animatedScroll = this.targetScroll = this.actualScroll;\n    this.lastVelocity = this.velocity = 0;\n    this.animate.stop();\n  }\n  /**\n   * Start lenis scroll after it has been stopped\n   */\n  start() {\n    if (!this.isStopped) return;\n    this.isStopped = false;\n    this.reset();\n  }\n  /**\n   * Stop lenis scroll\n   */\n  stop() {\n    if (this.isStopped) return;\n    this.isStopped = true;\n    this.animate.stop();\n    this.reset();\n  }\n  /**\n   * RequestAnimationFrame for lenis\n   *\n   * @param time The time in ms from an external clock like `requestAnimationFrame` or Tempus\n   */\n  raf(time) {\n    const deltaTime = time - (this.time || time);\n    this.time = time;\n    this.animate.advance(deltaTime * 1e-3);\n  }\n  /**\n   * Scroll to a target value\n   *\n   * @param target The target value to scroll to\n   * @param options The options for the scroll\n   *\n   * @example\n   * lenis.scrollTo(100, {\n   *   offset: 100,\n   *   duration: 1,\n   *   easing: (t) => 1 - Math.cos((t * Math.PI) / 2),\n   *   lerp: 0.1,\n   *   onStart: () => {\n   *     console.log('onStart')\n   *   },\n   *   onComplete: () => {\n   *     console.log('onComplete')\n   *   },\n   * })\n   */\n  scrollTo(target, {\n    offset = 0,\n    immediate = false,\n    lock = false,\n    duration = this.options.duration,\n    easing = this.options.easing,\n    lerp: lerp2 = this.options.lerp,\n    onStart,\n    onComplete,\n    force = false,\n    // scroll even if stopped\n    programmatic = true,\n    // called from outside of the class\n    userData\n  } = {}) {\n    if ((this.isStopped || this.isLocked) && !force) return;\n    if (typeof target === \"string\" && [\"top\", \"left\", \"start\"].includes(target)) {\n      target = 0;\n    } else if (typeof target === \"string\" && [\"bottom\", \"right\", \"end\"].includes(target)) {\n      target = this.limit;\n    } else {\n      let node;\n      if (typeof target === \"string\") {\n        node = document.querySelector(target);\n      } else if (target instanceof HTMLElement && target?.nodeType) {\n        node = target;\n      }\n      if (node) {\n        if (this.options.wrapper !== window) {\n          const wrapperRect = this.rootElement.getBoundingClientRect();\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top;\n        }\n        const rect = node.getBoundingClientRect();\n        target = (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll;\n      }\n    }\n    if (typeof target !== \"number\") return;\n    target += offset;\n    target = Math.round(target);\n    if (this.options.infinite) {\n      if (programmatic) {\n        this.targetScroll = this.animatedScroll = this.scroll;\n      }\n    } else {\n      target = clamp(0, target, this.limit);\n    }\n    if (target === this.targetScroll) {\n      onStart?.(this);\n      onComplete?.(this);\n      return;\n    }\n    this.userData = userData ?? {};\n    if (immediate) {\n      this.animatedScroll = this.targetScroll = target;\n      this.setScroll(this.scroll);\n      this.reset();\n      this.preventNextNativeScrollEvent();\n      this.emit();\n      onComplete?.(this);\n      this.userData = {};\n      return;\n    }\n    if (!programmatic) {\n      this.targetScroll = target;\n    }\n    this.animate.fromTo(this.animatedScroll, target, {\n      duration,\n      easing,\n      lerp: lerp2,\n      onStart: () => {\n        if (lock) this.isLocked = true;\n        this.isScrolling = \"smooth\";\n        onStart?.(this);\n      },\n      onUpdate: (value, completed) => {\n        this.isScrolling = \"smooth\";\n        this.lastVelocity = this.velocity;\n        this.velocity = value - this.animatedScroll;\n        this.direction = Math.sign(this.velocity);\n        this.animatedScroll = value;\n        this.setScroll(this.scroll);\n        if (programmatic) {\n          this.targetScroll = value;\n        }\n        if (!completed) this.emit();\n        if (completed) {\n          this.reset();\n          this.emit();\n          onComplete?.(this);\n          this.userData = {};\n          this.preventNextNativeScrollEvent();\n        }\n      }\n    });\n  }\n  preventNextNativeScrollEvent() {\n    this._preventNextNativeScrollEvent = true;\n    requestAnimationFrame(() => {\n      this._preventNextNativeScrollEvent = false;\n    });\n  }\n  /**\n   * The root element on which lenis is instanced\n   */\n  get rootElement() {\n    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;\n  }\n  /**\n   * The limit which is the maximum scroll value\n   */\n  get limit() {\n    if (this.options.__experimental__naiveDimensions) {\n      if (this.isHorizontal) {\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth;\n      } else {\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight;\n      }\n    } else {\n      return this.dimensions.limit[this.isHorizontal ? \"x\" : \"y\"];\n    }\n  }\n  /**\n   * Whether or not the scroll is horizontal\n   */\n  get isHorizontal() {\n    return this.options.orientation === \"horizontal\";\n  }\n  /**\n   * The actual scroll value\n   */\n  get actualScroll() {\n    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;\n  }\n  /**\n   * The current scroll value\n   */\n  get scroll() {\n    return this.options.infinite ? modulo(this.animatedScroll, this.limit) : this.animatedScroll;\n  }\n  /**\n   * The progress of the scroll relative to the limit\n   */\n  get progress() {\n    return this.limit === 0 ? 1 : this.scroll / this.limit;\n  }\n  /**\n   * Current scroll state\n   */\n  get isScrolling() {\n    return this._isScrolling;\n  }\n  set isScrolling(value) {\n    if (this._isScrolling !== value) {\n      this._isScrolling = value;\n      this.updateClassName();\n    }\n  }\n  /**\n   * Check if lenis is stopped\n   */\n  get isStopped() {\n    return this._isStopped;\n  }\n  set isStopped(value) {\n    if (this._isStopped !== value) {\n      this._isStopped = value;\n      this.updateClassName();\n    }\n  }\n  /**\n   * Check if lenis is locked\n   */\n  get isLocked() {\n    return this._isLocked;\n  }\n  set isLocked(value) {\n    if (this._isLocked !== value) {\n      this._isLocked = value;\n      this.updateClassName();\n    }\n  }\n  /**\n   * Check if lenis is smooth scrolling\n   */\n  get isSmooth() {\n    return this.isScrolling === \"smooth\";\n  }\n  /**\n   * The class name applied to the wrapper element\n   */\n  get className() {\n    let className = \"lenis\";\n    if (this.isStopped) className += \" lenis-stopped\";\n    if (this.isLocked) className += \" lenis-locked\";\n    if (this.isScrolling) className += \" lenis-scrolling\";\n    if (this.isScrolling === \"smooth\") className += \" lenis-smooth\";\n    return className;\n  }\n  updateClassName() {\n    this.cleanUpClassName();\n    this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();\n  }\n  cleanUpClassName() {\n    this.rootElement.className = this.rootElement.className.replace(/lenis(-\\w+)?/g, \"\").trim();\n  }\n};\nexport { Lenis as default };","map":{"version":3,"names":["version","clamp","min","input","max","Math","lerp","x","y","t","damp","lambda","deltaTime","exp","modulo","n","d","Animate","isRunning","value","from","to","currentTime","duration","easing","onUpdate","advance","completed","linearProgress","easedProgress","round","stop","fromTo","lerp2","onStart","debounce","callback","delay","timer","args","context","clearTimeout","setTimeout","apply","Dimensions","constructor","wrapper","content","autoResize","debounceValue","debouncedResize","resize","Window","window","addEventListener","wrapperResizeObserver","ResizeObserver","observe","contentResizeObserver","width","height","scrollHeight","scrollWidth","destroy","disconnect","removeEventListener","onWrapperResize","onContentResize","innerWidth","innerHeight","clientWidth","clientHeight","limit","Emitter","events","emit","event","callbacks","i","length","on","cb","push","filter","off","LINE_HEIGHT","listenerOptions","passive","VirtualScroll","element","options","wheelMultiplier","touchMultiplier","onWindowResize","onWheel","onTouchStart","onTouchMove","onTouchEnd","touchStart","lastDelta","emitter","clientX","clientY","targetTouches","deltaX","deltaY","deltaMode","multiplierX","multiplierY","Lenis","_isScrolling","_isStopped","_isLocked","_preventNextNativeScrollEvent","_resetVelocityTimeout","isTouching","time","userData","lastVelocity","velocity","direction","targetScroll","animatedScroll","animate","dimensions","virtualScroll","document","documentElement","eventsTarget","smoothWheel","syncTouch","syncTouchLerp","touchInertiaMultiplier","pow","infinite","orientation","gestureOrientation","prevent","overscroll","__experimental__naiveDimensions","lenisVersion","body","updateClassName","actualScroll","onNativeScroll","onPointerDown","onVirtualScroll","cleanUpClassName","setScroll","scroll","isHorizontal","rootElement","scrollLeft","scrollTop","button","reset","data","ctrlKey","lenisStopPropagation","isTouch","type","includes","isWheel","isTapToStop","isStopped","isLocked","isClick","isUnknownGesture","composedPath","slice","indexOf","find","node","HTMLElement","hasAttribute","preventDefault","isSmooth","isScrolling","delta","abs","isTouchEnd","hasTouchInertia","scrollTo","programmatic","lastScroll","sign","start","raf","target","offset","immediate","lock","onComplete","force","querySelector","nodeType","wrapperRect","getBoundingClientRect","left","top","rect","preventNextNativeScrollEvent","requestAnimationFrame","progress","className","trim","replace"],"sources":["C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\package.json","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\maths.ts","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\animate.ts","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\debounce.ts","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\dimensions.ts","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\emitter.ts","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\virtual-scroll.ts","C:\\Users\\yetze\\Documents\\Assignment2MobAppDev\\final-project-lezly-luna\\node_modules\\lenis\\packages\\core\\src\\lenis.ts"],"sourcesContent":["{\r\n  \"name\": \"lenis\",\r\n  \"version\": \"1.1.14\",\r\n  \"type\": \"module\",\r\n  \"sideEffects\": false,\r\n  \"author\": \"darkroom.engineering\",\r\n  \"license\": \"MIT\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/darkroomengineering/lenis.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/darkroomengineering/lenis/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/darkroomengineering/lenis\",\r\n  \"funding\": {\r\n    \"type\": \"github\",\r\n    \"url\": \"https://github.com/sponsors/darkroomengineering\"\r\n  },\r\n  \"keywords\": [\r\n    \"scroll\",\r\n    \"smooth\",\r\n    \"lenis\",\r\n    \"react\",\r\n    \"vue\"\r\n  ],\r\n  \"scripts\": {\r\n    \"build\": \"pnpm build:core && pnpm build:all\",\r\n    \"build:core\": \"tsup --config tsup.core.ts\",\r\n    \"build:all\": \"tsup\",\r\n    \"dev\": \"pnpm run -w --parallel /^dev:.*/\",\r\n    \"dev:build\": \"tsup --watch\",\r\n    \"dev:playground\": \"pnpm --filter playground dev\",\r\n    \"readme\": \"node ./scripts/update-readme.js\",\r\n    \"version:dev\": \"npm version prerelease --preid dev --force --no-git-tag-version\",\r\n    \"version:patch\": \"npm version patch --force --no-git-tag-version\",\r\n    \"version:minor\": \"npm version minor --force --no-git-tag-version\",\r\n    \"version:major\": \"npm version major --force --no-git-tag-version\",\r\n    \"postversion\": \"pnpm build && pnpm readme\",\r\n    \"publish:main\": \"npm publish\",\r\n    \"publish:dev\": \"npm publish --tag dev\"\r\n  },\r\n  \"files\": [\r\n    \"dist\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@darkroom.engineering/tempus\": \"^0.0.46\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"tsup\": \"^8.2.4\",\r\n    \"typescript\": \"^5.4.5\"\r\n  },\r\n  \"peerDependencies\": {\r\n    \"react\": \">=17.0.0\",\r\n    \"vue\": \">=3.0.0\"\r\n  },\r\n  \"peerDependenciesMeta\": {\r\n    \"react\": {\r\n      \"optional\": true\r\n    },\r\n    \"vue\": {\r\n      \"optional\": true\r\n    }\r\n  },\r\n  \"unpkg\": \"./dist/lenis.mjs\",\r\n  \"main\": \"./dist/lenis.mjs\",\r\n  \"module\": \"./dist/lenis.mjs\",\r\n  \"types\": \"./dist/lenis.d.ts\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./dist/lenis.d.ts\",\r\n      \"default\": \"./dist/lenis.mjs\"\r\n    },\r\n    \"./dist/*\": \"./dist/*\",\r\n    \"./react\": {\r\n      \"types\": \"./dist/lenis-react.d.ts\",\r\n      \"default\": \"./dist/lenis-react.mjs\"\r\n    },\r\n    \"./snap\": {\r\n      \"types\": \"./dist/lenis-snap.d.ts\",\r\n      \"default\": \"./dist/lenis-snap.mjs\"\r\n    },\r\n    \"./vue\": {\r\n      \"types\": \"./dist/lenis-vue.d.ts\",\r\n      \"default\": \"./dist/lenis-vue.mjs\"\r\n    }\r\n  },\r\n  \"pnpm\": {\r\n    \"overrides\": {\r\n      \"@radix-ui/react-context\": \"1.1.1\",\r\n      \"@studio-freight/tempus\": \"0.0.38\",\r\n      \"extend-shallow\": \"3.0.2\",\r\n      \"is-extendable\": \"1.0.1\",\r\n      \"react-is\": \"18.2.0\",\r\n      \"scheduler\": \"0.23.0\",\r\n      \"throttle-debounce\": \"5.0.0\",\r\n      \"zustand\": \"4.3.6\"\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Clamp a value between a minimum and maximum value\r\n *\r\n * @param min Minimum value\r\n * @param input Value to clamp\r\n * @param max Maximum value\r\n * @returns Clamped value\r\n */\r\nexport function clamp(min: number, input: number, max: number) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n/**\r\n * Truncate a floating-point number to a specified number of decimal places\r\n *\r\n * @param value Value to truncate\r\n * @param decimals Number of decimal places to truncate to\r\n * @returns Truncated value\r\n */\r\nexport function truncate(value: number, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n/**\r\n *  Linearly interpolate between two values using an amount (0 <= t <= 1)\r\n *\r\n * @param x First value\r\n * @param y Second value\r\n * @param t Amount to interpolate (0 <= t <= 1)\r\n * @returns Interpolated value\r\n */\r\nexport function lerp(x: number, y: number, t: number) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n/**\r\n * Damp a value over time using a damping factor\r\n * {@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}\r\n *\r\n * @param x Initial value\r\n * @param y Target value\r\n * @param lambda Damping factor\r\n * @param dt Time elapsed since the last update\r\n * @returns Damped value\r\n */\r\nexport function damp(x: number, y: number, lambda: number, deltaTime: number) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * deltaTime))\r\n}\r\n\r\n/**\r\n * Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n * {@link https://anguscroll.com/just/just-modulo}\r\n *\r\n * @param n Dividend\r\n * @param d Divisor\r\n * @returns Modulo\r\n */\r\nexport function modulo(n: number, d: number) {\r\n  return ((n % d) + d) % d\r\n}\r\n","import { clamp, damp } from './maths'\r\nimport type { EasingFunction, FromToOptions, OnUpdateCallback } from './types'\r\n\r\n/**\r\n * Animate class to handle value animations with lerping or easing\r\n *\r\n * @example\r\n * const animate = new Animate()\r\n * animate.fromTo(0, 100, { duration: 1, easing: (t) => t })\r\n * animate.advance(0.5) // 50\r\n */\r\nexport class Animate {\r\n  isRunning = false\r\n  value = 0\r\n  from = 0\r\n  to = 0\r\n  currentTime = 0\r\n\r\n  // These are instanciated in the fromTo method\r\n  lerp?: number\r\n  duration?: number\r\n  easing?: EasingFunction\r\n  onUpdate?: OnUpdateCallback\r\n\r\n  /**\r\n   * Advance the animation by the given delta time\r\n   *\r\n   * @param deltaTime - The time in seconds to advance the animation\r\n   */\r\n  advance(deltaTime: number) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.duration && this.easing) {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    } else if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      // If no easing or lerp, just jump to the end value\r\n      this.value = this.to\r\n      completed = true\r\n    }\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n  }\r\n\r\n  /** Stop the animation */\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  /**\r\n   * Set up the animation from a starting value to an ending value\r\n   * with optional parameters for lerping, duration, easing, and onUpdate callback\r\n   *\r\n   * @param from - The starting value\r\n   * @param to - The ending value\r\n   * @param options - Options for the animation\r\n   */\r\n  fromTo(\r\n    from: number,\r\n    to: number,\r\n    { lerp, duration, easing, onStart, onUpdate }: FromToOptions\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n","export function debounce<CB extends (...args: any[]) => void>(\r\n  callback: CB,\r\n  delay: number\r\n) {\r\n  let timer: number | undefined\r\n  return function <T>(this: T, ...args: Parameters<typeof callback>) {\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      timer = undefined\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n","import { debounce } from './debounce'\r\n\r\n/**\r\n * Dimensions class to handle the size of the content and wrapper\r\n *\r\n * @example\r\n * const dimensions = new Dimensions(wrapper, content)\r\n * dimensions.on('resize', (e) => {\r\n *   console.log(e.width, e.height)\r\n * })\r\n */\r\nexport class Dimensions {\r\n  width = 0\r\n  height = 0\r\n  scrollHeight = 0\r\n  scrollWidth = 0\r\n\r\n  // These are instanciated in the constructor as they need information from the options\r\n  private debouncedResize?: (...args: unknown[]) => void\r\n  private wrapperResizeObserver?: ResizeObserver\r\n  private contentResizeObserver?: ResizeObserver\r\n\r\n  constructor(\r\n    private wrapper: HTMLElement | Window | Element,\r\n    private content: HTMLElement | Element,\r\n    { autoResize = true, debounce: debounceValue = 250 } = {}\r\n  ) {\r\n    if (autoResize) {\r\n      this.debouncedResize = debounce(this.resize, debounceValue)\r\n\r\n      if (this.wrapper instanceof Window) {\r\n        window.addEventListener('resize', this.debouncedResize, false)\r\n      } else {\r\n        this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize)\r\n        this.wrapperResizeObserver.observe(this.wrapper)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(this.debouncedResize)\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n\r\n    if (this.wrapper === window && this.debouncedResize) {\r\n      window.removeEventListener('resize', this.debouncedResize, false)\r\n    }\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper instanceof Window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    if (this.wrapper instanceof Window) {\r\n      this.scrollHeight = this.content.scrollHeight\r\n      this.scrollWidth = this.content.scrollWidth\r\n    } else {\r\n      this.scrollHeight = this.wrapper.scrollHeight\r\n      this.scrollWidth = this.wrapper.scrollWidth\r\n    }\r\n  }\r\n\r\n  get limit() {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Emitter class to handle events\r\n * @example\r\n * const emitter = new Emitter()\r\n * emitter.on('event', (data) => {\r\n *   console.log(data)\r\n * })\r\n * emitter.emit('event', 'data')\r\n */\r\nexport class Emitter {\r\n  private events: Record<\r\n    string,\r\n    Array<(...args: unknown[]) => void> | undefined\r\n  > = {}\r\n\r\n  /**\r\n   * Emit an event with the given data\r\n   * @param event Event name\r\n   * @param args Data to pass to the event handlers\r\n   */\r\n  emit(event: string, ...args: unknown[]) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i]?.(...args)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a callback to the event\r\n   * @param event Event name\r\n   * @param cb Callback function\r\n   * @returns Unsubscribe function\r\n   */\r\n  on<CB extends (...args: any[]) => void>(event: string, cb: CB) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => cb !== i)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a callback from the event\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   */\r\n  off<CB extends (...args: any[]) => void>(event: string, callback: CB) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  /**\r\n   * Remove all event listeners and clean up\r\n   */\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n","import { Emitter } from './emitter'\r\nimport type { VirtualScrollCallback } from './types'\r\n\r\nconst LINE_HEIGHT = 100 / 6\r\nconst listenerOptions: AddEventListenerOptions = { passive: false }\r\n\r\nexport class VirtualScroll {\r\n  touchStart = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  lastDelta = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  window = {\r\n    width: 0,\r\n    height: 0,\r\n  }\r\n  private emitter = new Emitter()\r\n\r\n  constructor(\r\n    private element: HTMLElement,\r\n    private options = { wheelMultiplier: 1, touchMultiplier: 1 }\r\n  ) {\r\n    window.addEventListener('resize', this.onWindowResize, false)\r\n    this.onWindowResize()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel, listenerOptions)\r\n    this.element.addEventListener(\r\n      'touchstart',\r\n      this.onTouchStart,\r\n      listenerOptions\r\n    )\r\n    this.element.addEventListener(\r\n      'touchmove',\r\n      this.onTouchMove,\r\n      listenerOptions\r\n    )\r\n    this.element.addEventListener('touchend', this.onTouchEnd, listenerOptions)\r\n  }\r\n\r\n  /**\r\n   * Add an event listener for the given event and callback\r\n   *\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   */\r\n  on(event: string, callback: VirtualScrollCallback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  /** Remove all event listeners and clean up */\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    window.removeEventListener('resize', this.onWindowResize, false)\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel, listenerOptions)\r\n    this.element.removeEventListener(\r\n      'touchstart',\r\n      this.onTouchStart,\r\n      listenerOptions\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchmove',\r\n      this.onTouchMove,\r\n      listenerOptions\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchend',\r\n      this.onTouchEnd,\r\n      listenerOptions\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Event handler for 'touchstart' event\r\n   *\r\n   * @param event Touch event\r\n   */\r\n  onTouchStart = (event: TouchEvent) => {\r\n    // @ts-expect-error - event.targetTouches is not defined\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      event,\r\n    })\r\n  }\r\n\r\n  /** Event handler for 'touchmove' event */\r\n  onTouchMove = (event: TouchEvent) => {\r\n    // @ts-expect-error - event.targetTouches is not defined\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - this.touchStart.x) * this.options.touchMultiplier\r\n    const deltaY = -(clientY - this.touchStart.y) * this.options.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event: TouchEvent) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  /** Event handler for 'wheel' event */\r\n  onWheel = (event: WheelEvent) => {\r\n    let { deltaX, deltaY, deltaMode } = event\r\n\r\n    const multiplierX =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.width : 1\r\n    const multiplierY =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.height : 1\r\n\r\n    deltaX *= multiplierX\r\n    deltaY *= multiplierY\r\n\r\n    deltaX *= this.options.wheelMultiplier\r\n    deltaY *= this.options.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.window = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    }\r\n  }\r\n}\r\n","import { version } from '../../../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport type {\r\n  LenisEvent,\r\n  LenisOptions,\r\n  ScrollCallback,\r\n  Scrolling,\r\n  ScrollToOptions,\r\n  UserData,\r\n  VirtualScrollCallback,\r\n  VirtualScrollData,\r\n} from './types'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\ntype OptionalPick<T, F extends keyof T> = Omit<T, F> & Partial<Pick<T, F>>\r\n\r\nexport class Lenis {\r\n  private _isScrolling: Scrolling = false // true when scroll is animating\r\n  private _isStopped = false // true if user should not be able to scroll - enable/disable programmatically\r\n  private _isLocked = false // same as isStopped but enabled/disabled when scroll reaches target\r\n  private _preventNextNativeScrollEvent = false\r\n  private _resetVelocityTimeout: number | null = null\r\n\r\n  /**\r\n   * Whether or not the user is touching the screen\r\n   */\r\n  isTouching?: boolean\r\n  /**\r\n   * The time in ms since the lenis instance was created\r\n   */\r\n  time = 0\r\n  /**\r\n   * User data that will be forwarded through the scroll event\r\n   *\r\n   * @example\r\n   * lenis.scrollTo(100, {\r\n   *   userData: {\r\n   *     foo: 'bar'\r\n   *   }\r\n   * })\r\n   */\r\n  userData: UserData = {}\r\n  /**\r\n   * The last velocity of the scroll\r\n   */\r\n  lastVelocity = 0\r\n  /**\r\n   * The current velocity of the scroll\r\n   */\r\n  velocity = 0\r\n  /**\r\n   * The direction of the scroll\r\n   */\r\n  direction: 1 | -1 | 0 = 0\r\n  /**\r\n   * The options passed to the lenis instance\r\n   */\r\n  options: OptionalPick<\r\n    Required<LenisOptions>,\r\n    'duration' | 'prevent' | 'virtualScroll'\r\n  >\r\n  /**\r\n   * The target scroll value\r\n   */\r\n  targetScroll: number\r\n  /**\r\n   * The animated scroll value\r\n   */\r\n  animatedScroll: number\r\n\r\n  // These are instanciated here as they don't need information from the options\r\n  private readonly animate = new Animate()\r\n  private readonly emitter = new Emitter()\r\n  // These are instanciated in the constructor as they need information from the options\r\n  readonly dimensions: Dimensions // This is not private because it's used in the Snap class\r\n  private readonly virtualScroll: VirtualScroll\r\n\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    eventsTarget = wrapper,\r\n    smoothWheel = true,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.075,\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    autoResize = true,\r\n    prevent,\r\n    virtualScroll,\r\n    overscroll = true,\r\n    __experimental__naiveDimensions = false,\r\n  }: LenisOptions = {}) {\r\n    // Set version\r\n    window.lenisVersion = version\r\n\r\n    // Check if wrapper is html or body, fallback to window\r\n    if (\r\n      !wrapper ||\r\n      wrapper === document.documentElement ||\r\n      wrapper === document.body\r\n    ) {\r\n      wrapper = window\r\n    }\r\n\r\n    // Setup options\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      autoResize,\r\n      prevent,\r\n      virtualScroll,\r\n      overscroll,\r\n      __experimental__naiveDimensions,\r\n    }\r\n\r\n    // Setup dimensions instance\r\n    this.dimensions = new Dimensions(wrapper, content, { autoResize })\r\n\r\n    // Setup class name\r\n    this.updateClassName()\r\n\r\n    // Set the initial scroll value for all scroll information\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    // Add event listeners\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, false)\r\n\r\n    this.options.wrapper.addEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    // Setup virtual scroll instance\r\n    this.virtualScroll = new VirtualScroll(eventsTarget as HTMLElement, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  /**\r\n   * Destroy the lenis instance, remove all event listeners and clean up the class name\r\n   */\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener(\r\n      'scroll',\r\n      this.onNativeScroll,\r\n      false\r\n    )\r\n    this.options.wrapper.removeEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.cleanUpClassName()\r\n  }\r\n\r\n  /**\r\n   * Add an event listener for the given event and callback\r\n   *\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   * @returns Unsubscribe function\r\n   */\r\n  on(event: 'scroll', callback: ScrollCallback): () => void\r\n  on(event: 'virtual-scroll', callback: VirtualScrollCallback): () => void\r\n  on(event: LenisEvent, callback: any) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener for the given event and callback\r\n   *\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   */\r\n  off(event: 'scroll', callback: ScrollCallback): void\r\n  off(event: 'virtual-scroll', callback: VirtualScrollCallback): void\r\n  off(event: LenisEvent, callback: any) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  private setScroll(scroll: number) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  private onPointerDown = (event: PointerEvent | MouseEvent) => {\r\n    if (event.button === 1) {\r\n      this.reset()\r\n    }\r\n  }\r\n\r\n  private onVirtualScroll = (data: VirtualScrollData) => {\r\n    if (\r\n      typeof this.options.virtualScroll === 'function' &&\r\n      this.options.virtualScroll(data) === false\r\n    )\r\n      return\r\n\r\n    const { deltaX, deltaY, event } = data\r\n\r\n    this.emitter.emit('virtual-scroll', { deltaX, deltaY, event })\r\n\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n    // @ts-ignore\r\n    if (event.lenisStopPropagation) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    this.isTouching = event.type === 'touchstart' || event.type === 'touchmove'\r\n    // if (event.type === 'touchend') {\r\n    //   console.log('touchend', this.scroll)\r\n    //   // this.lastVelocity = this.velocity\r\n    //   // this.velocity = 0\r\n    //   // this.isScrolling = false\r\n    //   this.emit({ type: 'touchend' })\r\n    //   // alert('touchend')\r\n    //   return\r\n    // }\r\n\r\n    const isTapToStop =\r\n      this.options.syncTouch &&\r\n      isTouch &&\r\n      event.type === 'touchstart' &&\r\n      !this.isStopped &&\r\n      !this.isLocked\r\n\r\n    if (isTapToStop) {\r\n      this.reset()\r\n      return\r\n    }\r\n\r\n    const isClick = deltaX === 0 && deltaY === 0 // click event\r\n\r\n    // const isPullToRefresh =\r\n    //   this.options.gestureOrientation === 'vertical' &&\r\n    //   this.scroll === 0 &&\r\n    //   !this.options.infinite &&\r\n    //   deltaY <= 5 // touch pull to refresh, not reliable yet\r\n\r\n    const isUnknownGesture =\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) ||\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0)\r\n\r\n    if (isClick || isUnknownGesture) {\r\n      // console.log('prevent')\r\n      return\r\n    }\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    const prevent = this.options.prevent\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node instanceof HTMLElement &&\r\n          ((typeof prevent === 'function' && prevent?.(node)) ||\r\n            node.hasAttribute?.('data-lenis-prevent') ||\r\n            (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n            (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')))\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault() // this will stop forwarding the event to the parent, this is problematic\r\n      return\r\n    }\r\n\r\n    const isSmooth =\r\n      (this.options.syncTouch && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!isSmooth) {\r\n      this.isScrolling = 'native'\r\n      this.animate.stop()\r\n      // @ts-ignore\r\n      event.lenisStopPropagation = true\r\n      return\r\n    }\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    if (\r\n      !this.options.overscroll ||\r\n      this.options.infinite ||\r\n      (this.options.wrapper !== window &&\r\n        ((this.animatedScroll > 0 && this.animatedScroll < this.limit) ||\r\n          (this.animatedScroll === 0 && deltaY > 0) ||\r\n          (this.animatedScroll === this.limit && deltaY < 0)))\r\n    ) {\r\n      // @ts-ignore\r\n      event.lenisStopPropagation = true\r\n      // event.stopPropagation()\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5\r\n\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch\r\n        ? {\r\n            lerp: hasTouchInertia ? this.options.syncTouchLerp : 1,\r\n          }\r\n        : {\r\n            lerp: this.options.lerp,\r\n            duration: this.options.duration,\r\n            easing: this.options.easing,\r\n          }),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Force lenis to recalculate the dimensions\r\n   */\r\n  resize() {\r\n    this.dimensions.resize()\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.emit()\r\n  }\r\n\r\n  private emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  private onNativeScroll = () => {\r\n    if (this._resetVelocityTimeout !== null) {\r\n      clearTimeout(this._resetVelocityTimeout)\r\n      this._resetVelocityTimeout = null\r\n    }\r\n\r\n    if (this._preventNextNativeScrollEvent) {\r\n      this._preventNextNativeScrollEvent = false\r\n      return\r\n    }\r\n\r\n    if (this.isScrolling === false || this.isScrolling === 'native') {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.lastVelocity = this.velocity\r\n      this.velocity = this.animatedScroll - lastScroll\r\n      this.direction = Math.sign(\r\n        this.animatedScroll - lastScroll\r\n      ) as Lenis['direction']\r\n      this.isScrolling = 'native'\r\n      this.emit()\r\n\r\n      if (this.velocity !== 0) {\r\n        this._resetVelocityTimeout = setTimeout(() => {\r\n          this.lastVelocity = this.velocity\r\n          this.velocity = 0\r\n          this.isScrolling = false\r\n          this.emit()\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.lastVelocity = this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  /**\r\n   * Start lenis scroll after it has been stopped\r\n   */\r\n  start() {\r\n    if (!this.isStopped) return\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  /**\r\n   * Stop lenis scroll\r\n   */\r\n  stop() {\r\n    if (this.isStopped) return\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  /**\r\n   * RequestAnimationFrame for lenis\r\n   *\r\n   * @param time The time in ms from an external clock like `requestAnimationFrame` or Tempus\r\n   */\r\n  raf(time: number) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  /**\r\n   * Scroll to a target value\r\n   *\r\n   * @param target The target value to scroll to\r\n   * @param options The options for the scroll\r\n   *\r\n   * @example\r\n   * lenis.scrollTo(100, {\r\n   *   offset: 100,\r\n   *   duration: 1,\r\n   *   easing: (t) => 1 - Math.cos((t * Math.PI) / 2),\r\n   *   lerp: 0.1,\r\n   *   onStart: () => {\r\n   *     console.log('onStart')\r\n   *   },\r\n   *   onComplete: () => {\r\n   *     console.log('onComplete')\r\n   *   },\r\n   * })\r\n   */\r\n  scrollTo(\r\n    target: number | string | HTMLElement,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = this.options.lerp,\r\n      onStart,\r\n      onComplete,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n      userData,\r\n    }: ScrollToOptions = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (\r\n      typeof target === 'string' &&\r\n      ['top', 'left', 'start'].includes(target)\r\n    ) {\r\n      target = 0\r\n    } else if (\r\n      typeof target === 'string' &&\r\n      ['bottom', 'right', 'end'].includes(target)\r\n    ) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target instanceof HTMLElement && target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.rootElement.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (target === this.targetScroll) {\r\n      onStart?.(this)\r\n      onComplete?.(this)\r\n      return\r\n    }\r\n\r\n    this.userData = userData ?? {}\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      this.preventNextNativeScrollEvent()\r\n      this.emit()\r\n      onComplete?.(this)\r\n      this.userData = {}\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = 'smooth'\r\n        onStart?.(this)\r\n      },\r\n      onUpdate: (value: number, completed: boolean) => {\r\n        this.isScrolling = 'smooth'\r\n\r\n        // updated\r\n        this.lastVelocity = this.velocity\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity) as Lenis['direction']\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n          this.userData = {}\r\n          // avoid emitting event twice\r\n          this.preventNextNativeScrollEvent()\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  private preventNextNativeScrollEvent() {\r\n    this._preventNextNativeScrollEvent = true\r\n\r\n    requestAnimationFrame(() => {\r\n      this._preventNextNativeScrollEvent = false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The root element on which lenis is instanced\r\n   */\r\n  get rootElement() {\r\n    return (\r\n      this.options.wrapper === window\r\n        ? document.documentElement\r\n        : this.options.wrapper\r\n    ) as HTMLElement\r\n  }\r\n\r\n  /**\r\n   * The limit which is the maximum scroll value\r\n   */\r\n  get limit() {\r\n    if (this.options.__experimental__naiveDimensions) {\r\n      if (this.isHorizontal) {\r\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth\r\n      } else {\r\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight\r\n      }\r\n    } else {\r\n      return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the scroll is horizontal\r\n   */\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  /**\r\n   * The actual scroll value\r\n   */\r\n  get actualScroll() {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  /**\r\n   * The current scroll value\r\n   */\r\n  get scroll() {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  /**\r\n   * The progress of the scroll relative to the limit\r\n   */\r\n  get progress() {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  /**\r\n   * Current scroll state\r\n   */\r\n  get isScrolling() {\r\n    return this._isScrolling\r\n  }\r\n\r\n  private set isScrolling(value: Scrolling) {\r\n    if (this._isScrolling !== value) {\r\n      this._isScrolling = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if lenis is stopped\r\n   */\r\n  get isStopped() {\r\n    return this._isStopped\r\n  }\r\n\r\n  private set isStopped(value: boolean) {\r\n    if (this._isStopped !== value) {\r\n      this._isStopped = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if lenis is locked\r\n   */\r\n  get isLocked() {\r\n    return this._isLocked\r\n  }\r\n\r\n  private set isLocked(value: boolean) {\r\n    if (this._isLocked !== value) {\r\n      this._isLocked = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if lenis is smooth scrolling\r\n   */\r\n  get isSmooth() {\r\n    return this.isScrolling === 'smooth'\r\n  }\r\n\r\n  /**\r\n   * The class name applied to the wrapper element\r\n   */\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isScrolling === 'smooth') className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  private updateClassName() {\r\n    this.cleanUpClassName()\r\n\r\n    this.rootElement.className =\r\n      `${this.rootElement.className} ${this.className}`.trim()\r\n  }\r\n\r\n  private cleanUpClassName() {\r\n    this.rootElement.className = this.rootElement.className\r\n      .replace(/lenis(-\\w+)?/g, '')\r\n      .trim()\r\n  }\r\n}\r\n"],"mappings":";AAEE,IAAAA,OAAA,GAAW;;;ACMN,SAASC,MAAMC,GAAA,EAAaC,KAAA,EAAeC,GAAA,EAAa;EAC7D,OAAOC,IAAA,CAAKD,GAAA,CAAIF,GAAA,EAAKG,IAAA,CAAKH,GAAA,CAAIC,KAAA,EAAOC,GAAG,CAAC;AAC3C;AAqBO,SAASE,KAAKC,CAAA,EAAWC,CAAA,EAAWC,CAAA,EAAW;EACpD,QAAQ,IAAIA,CAAA,IAAKF,CAAA,GAAIE,CAAA,GAAID,CAAA;AAC3B;AAYO,SAASE,KAAKH,CAAA,EAAWC,CAAA,EAAWG,MAAA,EAAgBC,SAAA,EAAmB;EAC5E,OAAON,IAAA,CAAKC,CAAA,EAAGC,CAAA,EAAG,IAAIH,IAAA,CAAKQ,GAAA,CAAI,CAACF,MAAA,GAASC,SAAS,CAAC;AACrD;AAUO,SAASE,OAAOC,CAAA,EAAWC,CAAA,EAAW;EAC3C,QAASD,CAAA,GAAIC,CAAA,GAAKA,CAAA,IAAKA,CAAA;AACzB;;;AChDO,IAAMC,OAAA,GAAN,MAAc;EACnBC,SAAA,GAAY;EACZC,KAAA,GAAQ;EACRC,IAAA,GAAO;EACPC,EAAA,GAAK;EACLC,WAAA,GAAc;EAAA;EAGdhB,IAAA;EACAiB,QAAA;EACAC,MAAA;EACAC,QAAA;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAC,QAAQd,SAAA,EAAmB;IACzB,IAAI,CAAC,KAAKM,SAAA,EAAW;IAErB,IAAIS,SAAA,GAAY;IAEhB,IAAI,KAAKJ,QAAA,IAAY,KAAKC,MAAA,EAAQ;MAChC,KAAKF,WAAA,IAAeV,SAAA;MACpB,MAAMgB,cAAA,GAAiB3B,KAAA,CAAM,GAAG,KAAKqB,WAAA,GAAc,KAAKC,QAAA,EAAU,CAAC;MAEnEI,SAAA,GAAYC,cAAA,IAAkB;MAC9B,MAAMC,aAAA,GAAgBF,SAAA,GAAY,IAAI,KAAKH,MAAA,CAAOI,cAAc;MAChE,KAAKT,KAAA,GAAQ,KAAKC,IAAA,IAAQ,KAAKC,EAAA,GAAK,KAAKD,IAAA,IAAQS,aAAA;IACnD,WAAW,KAAKvB,IAAA,EAAM;MACpB,KAAKa,KAAA,GAAQT,IAAA,CAAK,KAAKS,KAAA,EAAO,KAAKE,EAAA,EAAI,KAAKf,IAAA,GAAO,IAAIM,SAAS;MAChE,IAAIP,IAAA,CAAKyB,KAAA,CAAM,KAAKX,KAAK,MAAM,KAAKE,EAAA,EAAI;QACtC,KAAKF,KAAA,GAAQ,KAAKE,EAAA;QAClBM,SAAA,GAAY;MACd;IACF,OAAO;MAEL,KAAKR,KAAA,GAAQ,KAAKE,EAAA;MAClBM,SAAA,GAAY;IACd;IAEA,IAAIA,SAAA,EAAW;MACb,KAAKI,IAAA,CAAK;IACZ;IAGA,KAAKN,QAAA,GAAW,KAAKN,KAAA,EAAOQ,SAAS;EACvC;EAAA;EAGAI,KAAA,EAAO;IACL,KAAKb,SAAA,GAAY;EACnB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAc,OACEZ,IAAA,EACAC,EAAA,EACA;IAAEf,IAAA,EAAA2B,KAAA;IAAMV,QAAA;IAAUC,MAAA;IAAQU,OAAA;IAAST;EAAS,GAC5C;IACA,KAAKL,IAAA,GAAO,KAAKD,KAAA,GAAQC,IAAA;IACzB,KAAKC,EAAA,GAAKA,EAAA;IACV,KAAKf,IAAA,GAAO2B,KAAA;IACZ,KAAKV,QAAA,GAAWA,QAAA;IAChB,KAAKC,MAAA,GAASA,MAAA;IACd,KAAKF,WAAA,GAAc;IACnB,KAAKJ,SAAA,GAAY;IAEjBgB,OAAA,GAAU;IACV,KAAKT,QAAA,GAAWA,QAAA;EAClB;AACF;;;AC1FO,SAASU,SACdC,QAAA,EACAC,KAAA,EACA;EACA,IAAIC,KAAA;EACJ,OAAO,aAAyBC,IAAA,EAAmC;IACjE,IAAIC,OAAA,GAAU;IACdC,YAAA,CAAaH,KAAK;IAClBA,KAAA,GAAQI,UAAA,CAAW,MAAM;MACvBJ,KAAA,GAAQ;MACRF,QAAA,CAASO,KAAA,CAAMH,OAAA,EAASD,IAAI;IAC9B,GAAGF,KAAK;EACV;AACF;;;ACFO,IAAMO,UAAA,GAAN,MAAiB;EAWtBC,YACUC,OAAA,EACAC,OAAA,EACR;IAAEC,UAAA,GAAa;IAAMb,QAAA,EAAUc,aAAA,GAAgB;EAAI,IAAI,CAAC,GACxD;IAHQ,KAAAH,OAAA,GAAAA,OAAA;IACA,KAAAC,OAAA,GAAAA,OAAA;IAGR,IAAIC,UAAA,EAAY;MACd,KAAKE,eAAA,GAAkBf,QAAA,CAAS,KAAKgB,MAAA,EAAQF,aAAa;MAE1D,IAAI,KAAKH,OAAA,YAAmBM,MAAA,EAAQ;QAClCC,MAAA,CAAOC,gBAAA,CAAiB,UAAU,KAAKJ,eAAA,EAAiB,KAAK;MAC/D,OAAO;QACL,KAAKK,qBAAA,GAAwB,IAAIC,cAAA,CAAe,KAAKN,eAAe;QACpE,KAAKK,qBAAA,CAAsBE,OAAA,CAAQ,KAAKX,OAAO;MACjD;MAEA,KAAKY,qBAAA,GAAwB,IAAIF,cAAA,CAAe,KAAKN,eAAe;MACpE,KAAKQ,qBAAA,CAAsBD,OAAA,CAAQ,KAAKV,OAAO;IACjD;IAEA,KAAKI,MAAA,CAAO;EACd;EA9BAQ,KAAA,GAAQ;EACRC,MAAA,GAAS;EACTC,YAAA,GAAe;EACfC,WAAA,GAAc;EAAA;EAGNZ,eAAA;EACAK,qBAAA;EACAG,qBAAA;EAwBRK,QAAA,EAAU;IACR,KAAKR,qBAAA,EAAuBS,UAAA,CAAW;IACvC,KAAKN,qBAAA,EAAuBM,UAAA,CAAW;IAEvC,IAAI,KAAKlB,OAAA,KAAYO,MAAA,IAAU,KAAKH,eAAA,EAAiB;MACnDG,MAAA,CAAOY,mBAAA,CAAoB,UAAU,KAAKf,eAAA,EAAiB,KAAK;IAClE;EACF;EAEAC,MAAA,GAASA,CAAA,KAAM;IACb,KAAKe,eAAA,CAAgB;IACrB,KAAKC,eAAA,CAAgB;EACvB;EAEAD,eAAA,GAAkBA,CAAA,KAAM;IACtB,IAAI,KAAKpB,OAAA,YAAmBM,MAAA,EAAQ;MAClC,KAAKO,KAAA,GAAQN,MAAA,CAAOe,UAAA;MACpB,KAAKR,MAAA,GAASP,MAAA,CAAOgB,WAAA;IACvB,OAAO;MACL,KAAKV,KAAA,GAAQ,KAAKb,OAAA,CAAQwB,WAAA;MAC1B,KAAKV,MAAA,GAAS,KAAKd,OAAA,CAAQyB,YAAA;IAC7B;EACF;EAEAJ,eAAA,GAAkBA,CAAA,KAAM;IACtB,IAAI,KAAKrB,OAAA,YAAmBM,MAAA,EAAQ;MAClC,KAAKS,YAAA,GAAe,KAAKd,OAAA,CAAQc,YAAA;MACjC,KAAKC,WAAA,GAAc,KAAKf,OAAA,CAAQe,WAAA;IAClC,OAAO;MACL,KAAKD,YAAA,GAAe,KAAKf,OAAA,CAAQe,YAAA;MACjC,KAAKC,WAAA,GAAc,KAAKhB,OAAA,CAAQgB,WAAA;IAClC;EACF;EAEA,IAAIU,MAAA,EAAQ;IACV,OAAO;MACLjE,CAAA,EAAG,KAAKuD,WAAA,GAAc,KAAKH,KAAA;MAC3BnD,CAAA,EAAG,KAAKqD,YAAA,GAAe,KAAKD;IAC9B;EACF;AACF;;;AC3EO,IAAMa,OAAA,GAAN,MAAc;EACXC,MAAA,GAGJ,CAAC;EAAA;AAAA;AAAA;AAAA;AAAA;EAOLC,KAAKC,KAAA,KAAkBrC,IAAA,EAAiB;IACtC,IAAIsC,SAAA,GAAY,KAAKH,MAAA,CAAOE,KAAK,KAAK,EAAC;IACvC,SAASE,CAAA,GAAI,GAAGC,MAAA,GAASF,SAAA,CAAUE,MAAA,EAAQD,CAAA,GAAIC,MAAA,EAAQD,CAAA,IAAK;MAC1DD,SAAA,CAAUC,CAAC,IAAI,GAAGvC,IAAI;IACxB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAyC,GAAwCJ,KAAA,EAAeK,EAAA,EAAQ;IAE7D,KAAKP,MAAA,CAAOE,KAAK,GAAGM,IAAA,CAAKD,EAAE,MAAM,KAAKP,MAAA,CAAOE,KAAK,IAAI,CAACK,EAAE;IAGzD,OAAO,MAAM;MACX,KAAKP,MAAA,CAAOE,KAAK,IAAI,KAAKF,MAAA,CAAOE,KAAK,GAAGO,MAAA,CAAQL,CAAA,IAAMG,EAAA,KAAOH,CAAC;IACjE;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAM,IAAyCR,KAAA,EAAexC,QAAA,EAAc;IACpE,KAAKsC,MAAA,CAAOE,KAAK,IAAI,KAAKF,MAAA,CAAOE,KAAK,GAAGO,MAAA,CAAQL,CAAA,IAAM1C,QAAA,KAAa0C,CAAC;EACvE;EAAA;AAAA;AAAA;EAKAf,QAAA,EAAU;IACR,KAAKW,MAAA,GAAS,CAAC;EACjB;AACF;;;ACvDA,IAAMW,WAAA,GAAc,MAAM;AAC1B,IAAMC,eAAA,GAA2C;EAAEC,OAAA,EAAS;AAAM;AAE3D,IAAMC,aAAA,GAAN,MAAoB;EAezB3C,YACU4C,OAAA,EACAC,OAAA,GAAU;IAAEC,eAAA,EAAiB;IAAGC,eAAA,EAAiB;EAAE,GAC3D;IAFQ,KAAAH,OAAA,GAAAA,OAAA;IACA,KAAAC,OAAA,GAAAA,OAAA;IAERrC,MAAA,CAAOC,gBAAA,CAAiB,UAAU,KAAKuC,cAAA,EAAgB,KAAK;IAC5D,KAAKA,cAAA,CAAe;IAEpB,KAAKJ,OAAA,CAAQnC,gBAAA,CAAiB,SAAS,KAAKwC,OAAA,EAASR,eAAe;IACpE,KAAKG,OAAA,CAAQnC,gBAAA,CACX,cACA,KAAKyC,YAAA,EACLT,eACF;IACA,KAAKG,OAAA,CAAQnC,gBAAA,CACX,aACA,KAAK0C,WAAA,EACLV,eACF;IACA,KAAKG,OAAA,CAAQnC,gBAAA,CAAiB,YAAY,KAAK2C,UAAA,EAAYX,eAAe;EAC5E;EAjCAY,UAAA,GAAa;IACX3F,CAAA,EAAG;IACHC,CAAA,EAAG;EACL;EACA2F,SAAA,GAAY;IACV5F,CAAA,EAAG;IACHC,CAAA,EAAG;EACL;EACA6C,MAAA,GAAS;IACPM,KAAA,EAAO;IACPC,MAAA,EAAQ;EACV;EACQwC,OAAA,GAAU,IAAI3B,OAAA,CAAQ;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA6B9BO,GAAGJ,KAAA,EAAexC,QAAA,EAAiC;IACjD,OAAO,KAAKgE,OAAA,CAAQpB,EAAA,CAAGJ,KAAA,EAAOxC,QAAQ;EACxC;EAAA;EAGA2B,QAAA,EAAU;IACR,KAAKqC,OAAA,CAAQrC,OAAA,CAAQ;IAErBV,MAAA,CAAOY,mBAAA,CAAoB,UAAU,KAAK4B,cAAA,EAAgB,KAAK;IAE/D,KAAKJ,OAAA,CAAQxB,mBAAA,CAAoB,SAAS,KAAK6B,OAAA,EAASR,eAAe;IACvE,KAAKG,OAAA,CAAQxB,mBAAA,CACX,cACA,KAAK8B,YAAA,EACLT,eACF;IACA,KAAKG,OAAA,CAAQxB,mBAAA,CACX,aACA,KAAK+B,WAAA,EACLV,eACF;IACA,KAAKG,OAAA,CAAQxB,mBAAA,CACX,YACA,KAAKgC,UAAA,EACLX,eACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAS,YAAA,GAAgBnB,KAAA,IAAsB;IAEpC,MAAM;MAAEyB,OAAA;MAASC;IAAQ,IAAI1B,KAAA,CAAM2B,aAAA,GAC/B3B,KAAA,CAAM2B,aAAA,CAAc,CAAC,IACrB3B,KAAA;IAEJ,KAAKsB,UAAA,CAAW3F,CAAA,GAAI8F,OAAA;IACpB,KAAKH,UAAA,CAAW1F,CAAA,GAAI8F,OAAA;IAEpB,KAAKH,SAAA,GAAY;MACf5F,CAAA,EAAG;MACHC,CAAA,EAAG;IACL;IAEA,KAAK4F,OAAA,CAAQzB,IAAA,CAAK,UAAU;MAC1B6B,MAAA,EAAQ;MACRC,MAAA,EAAQ;MACR7B;IACF,CAAC;EACH;EAAA;EAGAoB,WAAA,GAAepB,KAAA,IAAsB;IAEnC,MAAM;MAAEyB,OAAA;MAASC;IAAQ,IAAI1B,KAAA,CAAM2B,aAAA,GAC/B3B,KAAA,CAAM2B,aAAA,CAAc,CAAC,IACrB3B,KAAA;IAEJ,MAAM4B,MAAA,GAAS,EAAEH,OAAA,GAAU,KAAKH,UAAA,CAAW3F,CAAA,IAAK,KAAKmF,OAAA,CAAQE,eAAA;IAC7D,MAAMa,MAAA,GAAS,EAAEH,OAAA,GAAU,KAAKJ,UAAA,CAAW1F,CAAA,IAAK,KAAKkF,OAAA,CAAQE,eAAA;IAE7D,KAAKM,UAAA,CAAW3F,CAAA,GAAI8F,OAAA;IACpB,KAAKH,UAAA,CAAW1F,CAAA,GAAI8F,OAAA;IAEpB,KAAKH,SAAA,GAAY;MACf5F,CAAA,EAAGiG,MAAA;MACHhG,CAAA,EAAGiG;IACL;IAEA,KAAKL,OAAA,CAAQzB,IAAA,CAAK,UAAU;MAC1B6B,MAAA;MACAC,MAAA;MACA7B;IACF,CAAC;EACH;EAEAqB,UAAA,GAAcrB,KAAA,IAAsB;IAClC,KAAKwB,OAAA,CAAQzB,IAAA,CAAK,UAAU;MAC1B6B,MAAA,EAAQ,KAAKL,SAAA,CAAU5F,CAAA;MACvBkG,MAAA,EAAQ,KAAKN,SAAA,CAAU3F,CAAA;MACvBoE;IACF,CAAC;EACH;EAAA;EAGAkB,OAAA,GAAWlB,KAAA,IAAsB;IAC/B,IAAI;MAAE4B,MAAA;MAAQC,MAAA;MAAQC;IAAU,IAAI9B,KAAA;IAEpC,MAAM+B,WAAA,GACJD,SAAA,KAAc,IAAIrB,WAAA,GAAcqB,SAAA,KAAc,IAAI,KAAKrD,MAAA,CAAOM,KAAA,GAAQ;IACxE,MAAMiD,WAAA,GACJF,SAAA,KAAc,IAAIrB,WAAA,GAAcqB,SAAA,KAAc,IAAI,KAAKrD,MAAA,CAAOO,MAAA,GAAS;IAEzE4C,MAAA,IAAUG,WAAA;IACVF,MAAA,IAAUG,WAAA;IAEVJ,MAAA,IAAU,KAAKd,OAAA,CAAQC,eAAA;IACvBc,MAAA,IAAU,KAAKf,OAAA,CAAQC,eAAA;IAEvB,KAAKS,OAAA,CAAQzB,IAAA,CAAK,UAAU;MAAE6B,MAAA;MAAQC,MAAA;MAAQ7B;IAAM,CAAC;EACvD;EAEAiB,cAAA,GAAiBA,CAAA,KAAM;IACrB,KAAKxC,MAAA,GAAS;MACZM,KAAA,EAAON,MAAA,CAAOe,UAAA;MACdR,MAAA,EAAQP,MAAA,CAAOgB;IACjB;EACF;AACF;;;ACpIO,IAAMwC,KAAA,GAAN,MAAY;EACTC,YAAA,GAA0B;EAAA;EAC1BC,UAAA,GAAa;EAAA;EACbC,SAAA,GAAY;EAAA;EACZC,6BAAA,GAAgC;EAChCC,qBAAA,GAAuC;EAAA;AAAA;AAAA;EAK/CC,UAAA;EAAA;AAAA;AAAA;EAIAC,IAAA,GAAO;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWPC,QAAA,GAAqB,CAAC;EAAA;AAAA;AAAA;EAItBC,YAAA,GAAe;EAAA;AAAA;AAAA;EAIfC,QAAA,GAAW;EAAA;AAAA;AAAA;EAIXC,SAAA,GAAwB;EAAA;AAAA;AAAA;EAIxB9B,OAAA;EAAA;AAAA;AAAA;EAOA+B,YAAA;EAAA;AAAA;AAAA;EAIAC,cAAA;EAAA;EAGiBC,OAAA,GAAU,IAAI1G,OAAA,CAAQ;EACtBmF,OAAA,GAAU,IAAI3B,OAAA,CAAQ;EAAA;EAE9BmD,UAAA;EAAA;EACQC,aAAA;EAEjBhF,YAAY;IACVC,OAAA,GAAUO,MAAA;IACVN,OAAA,GAAU+E,QAAA,CAASC,eAAA;IACnBC,YAAA,GAAelF,OAAA;IACfmF,WAAA,GAAc;IACdC,SAAA,GAAY;IACZC,aAAA,GAAgB;IAChBC,sBAAA,GAAyB;IACzB7G,QAAA;IAAA;IACAC,MAAA,GAAUf,CAAA,IAAMJ,IAAA,CAAKH,GAAA,CAAI,GAAG,QAAQG,IAAA,CAAKgI,GAAA,CAAI,GAAG,MAAM5H,CAAC,CAAC;IACxDH,IAAA,EAAA2B,KAAA,GAAO;IACPqG,QAAA,GAAW;IACXC,WAAA,GAAc;IAAA;IACdC,kBAAA,GAAqB;IAAA;IACrB5C,eAAA,GAAkB;IAClBD,eAAA,GAAkB;IAClB3C,UAAA,GAAa;IACbyF,OAAA;IACAZ,aAAA;IACAa,UAAA,GAAa;IACbC,+BAAA,GAAkC;EACpC,IAAkB,CAAC,GAAG;IAEpBtF,MAAA,CAAOuF,YAAA,GAAe5I,OAAA;IAGtB,IACE,CAAC8C,OAAA,IACDA,OAAA,KAAYgF,QAAA,CAASC,eAAA,IACrBjF,OAAA,KAAYgF,QAAA,CAASe,IAAA,EACrB;MACA/F,OAAA,GAAUO,MAAA;IACZ;IAGA,KAAKqC,OAAA,GAAU;MACb5C,OAAA;MACAC,OAAA;MACAiF,YAAA;MACAC,WAAA;MACAC,SAAA;MACAC,aAAA;MACAC,sBAAA;MACA7G,QAAA;MACAC,MAAA;MACAlB,IAAA,EAAA2B,KAAA;MACAqG,QAAA;MACAE,kBAAA;MACAD,WAAA;MACA3C,eAAA;MACAD,eAAA;MACA3C,UAAA;MACAyF,OAAA;MACAZ,aAAA;MACAa,UAAA;MACAC;IACF;IAGA,KAAKf,UAAA,GAAa,IAAIhF,UAAA,CAAWE,OAAA,EAASC,OAAA,EAAS;MAAEC;IAAW,CAAC;IAGjE,KAAK8F,eAAA,CAAgB;IAGrB,KAAKrB,YAAA,GAAe,KAAKC,cAAA,GAAiB,KAAKqB,YAAA;IAG/C,KAAKrD,OAAA,CAAQ5C,OAAA,CAAQQ,gBAAA,CAAiB,UAAU,KAAK0F,cAAA,EAAgB,KAAK;IAE1E,KAAKtD,OAAA,CAAQ5C,OAAA,CAAQQ,gBAAA,CACnB,eACA,KAAK2F,aAAA,EACL,KACF;IAGA,KAAKpB,aAAA,GAAgB,IAAIrC,aAAA,CAAcwC,YAAA,EAA6B;MAClEpC,eAAA;MACAD;IACF,CAAC;IACD,KAAKkC,aAAA,CAAc7C,EAAA,CAAG,UAAU,KAAKkE,eAAe;EACtD;EAAA;AAAA;AAAA;EAKAnF,QAAA,EAAU;IACR,KAAKqC,OAAA,CAAQrC,OAAA,CAAQ;IAErB,KAAK2B,OAAA,CAAQ5C,OAAA,CAAQmB,mBAAA,CACnB,UACA,KAAK+E,cAAA,EACL,KACF;IACA,KAAKtD,OAAA,CAAQ5C,OAAA,CAAQmB,mBAAA,CACnB,eACA,KAAKgF,aAAA,EACL,KACF;IAEA,KAAKpB,aAAA,CAAc9D,OAAA,CAAQ;IAC3B,KAAK6D,UAAA,CAAW7D,OAAA,CAAQ;IAExB,KAAKoF,gBAAA,CAAiB;EACxB;EAWAnE,GAAGJ,KAAA,EAAmBxC,QAAA,EAAe;IACnC,OAAO,KAAKgE,OAAA,CAAQpB,EAAA,CAAGJ,KAAA,EAAOxC,QAAQ;EACxC;EAUAgD,IAAIR,KAAA,EAAmBxC,QAAA,EAAe;IACpC,OAAO,KAAKgE,OAAA,CAAQhB,GAAA,CAAIR,KAAA,EAAOxC,QAAQ;EACzC;EAEQgH,UAAUC,MAAA,EAAgB;IAEhC,IAAI,KAAKC,YAAA,EAAc;MACrB,KAAKC,WAAA,CAAYC,UAAA,GAAaH,MAAA;IAChC,OAAO;MACL,KAAKE,WAAA,CAAYE,SAAA,GAAYJ,MAAA;IAC/B;EACF;EAEQJ,aAAA,GAAiBrE,KAAA,IAAqC;IAC5D,IAAIA,KAAA,CAAM8E,MAAA,KAAW,GAAG;MACtB,KAAKC,KAAA,CAAM;IACb;EACF;EAEQT,eAAA,GAAmBU,IAAA,IAA4B;IACrD,IACE,OAAO,KAAKlE,OAAA,CAAQmC,aAAA,KAAkB,cACtC,KAAKnC,OAAA,CAAQmC,aAAA,CAAc+B,IAAI,MAAM,OAErC;IAEF,MAAM;MAAEpD,MAAA;MAAQC,MAAA;MAAQ7B;IAAM,IAAIgF,IAAA;IAElC,KAAKxD,OAAA,CAAQzB,IAAA,CAAK,kBAAkB;MAAE6B,MAAA;MAAQC,MAAA;MAAQ7B;IAAM,CAAC;IAG7D,IAAIA,KAAA,CAAMiF,OAAA,EAAS;IAEnB,IAAIjF,KAAA,CAAMkF,oBAAA,EAAsB;IAEhC,MAAMC,OAAA,GAAUnF,KAAA,CAAMoF,IAAA,CAAKC,QAAA,CAAS,OAAO;IAC3C,MAAMC,OAAA,GAAUtF,KAAA,CAAMoF,IAAA,CAAKC,QAAA,CAAS,OAAO;IAE3C,KAAK9C,UAAA,GAAavC,KAAA,CAAMoF,IAAA,KAAS,gBAAgBpF,KAAA,CAAMoF,IAAA,KAAS;IAWhE,MAAMG,WAAA,GACJ,KAAKzE,OAAA,CAAQwC,SAAA,IACb6B,OAAA,IACAnF,KAAA,CAAMoF,IAAA,KAAS,gBACf,CAAC,KAAKI,SAAA,IACN,CAAC,KAAKC,QAAA;IAER,IAAIF,WAAA,EAAa;MACf,KAAKR,KAAA,CAAM;MACX;IACF;IAEA,MAAMW,OAAA,GAAU9D,MAAA,KAAW,KAAKC,MAAA,KAAW;IAQ3C,MAAM8D,gBAAA,GACH,KAAK7E,OAAA,CAAQ8C,kBAAA,KAAuB,cAAc/B,MAAA,KAAW,KAC7D,KAAKf,OAAA,CAAQ8C,kBAAA,KAAuB,gBAAgBhC,MAAA,KAAW;IAElE,IAAI8D,OAAA,IAAWC,gBAAA,EAAkB;MAE/B;IACF;IAGA,IAAIC,YAAA,GAAe5F,KAAA,CAAM4F,YAAA,CAAa;IACtCA,YAAA,GAAeA,YAAA,CAAaC,KAAA,CAAM,GAAGD,YAAA,CAAaE,OAAA,CAAQ,KAAKnB,WAAW,CAAC;IAE3E,MAAMd,OAAA,GAAU,KAAK/C,OAAA,CAAQ+C,OAAA;IAE7B,IACE,CAAC,CAAC+B,YAAA,CAAaG,IAAA,CACZC,IAAA,IACCA,IAAA,YAAgBC,WAAA,KACd,OAAOpC,OAAA,KAAY,cAAcA,OAAA,GAAUmC,IAAI,KAC/CA,IAAA,CAAKE,YAAA,GAAe,oBAAoB,KACvCf,OAAA,IAAWa,IAAA,CAAKE,YAAA,GAAe,0BAA0B,KACzDZ,OAAA,IAAWU,IAAA,CAAKE,YAAA,GAAe,0BAA0B,EAChE,GAEA;IAEF,IAAI,KAAKV,SAAA,IAAa,KAAKC,QAAA,EAAU;MACnCzF,KAAA,CAAMmG,cAAA,CAAe;MACrB;IACF;IAEA,MAAMC,QAAA,GACH,KAAKtF,OAAA,CAAQwC,SAAA,IAAa6B,OAAA,IAC1B,KAAKrE,OAAA,CAAQuC,WAAA,IAAeiC,OAAA;IAE/B,IAAI,CAACc,QAAA,EAAU;MACb,KAAKC,WAAA,GAAc;MACnB,KAAKtD,OAAA,CAAQ5F,IAAA,CAAK;MAElB6C,KAAA,CAAMkF,oBAAA,GAAuB;MAC7B;IACF;IAEA,IAAIoB,KAAA,GAAQzE,MAAA;IACZ,IAAI,KAAKf,OAAA,CAAQ8C,kBAAA,KAAuB,QAAQ;MAC9C0C,KAAA,GAAQ7K,IAAA,CAAK8K,GAAA,CAAI1E,MAAM,IAAIpG,IAAA,CAAK8K,GAAA,CAAI3E,MAAM,IAAIC,MAAA,GAASD,MAAA;IACzD,WAAW,KAAKd,OAAA,CAAQ8C,kBAAA,KAAuB,cAAc;MAC3D0C,KAAA,GAAQ1E,MAAA;IACV;IAEA,IACE,CAAC,KAAKd,OAAA,CAAQgD,UAAA,IACd,KAAKhD,OAAA,CAAQ4C,QAAA,IACZ,KAAK5C,OAAA,CAAQ5C,OAAA,KAAYO,MAAA,KACtB,KAAKqE,cAAA,GAAiB,KAAK,KAAKA,cAAA,GAAiB,KAAKlD,KAAA,IACrD,KAAKkD,cAAA,KAAmB,KAAKjB,MAAA,GAAS,KACtC,KAAKiB,cAAA,KAAmB,KAAKlD,KAAA,IAASiC,MAAA,GAAS,IACpD;MAEA7B,KAAA,CAAMkF,oBAAA,GAAuB;IAE/B;IAEAlF,KAAA,CAAMmG,cAAA,CAAe;IAErB,MAAM7C,SAAA,GAAY6B,OAAA,IAAW,KAAKrE,OAAA,CAAQwC,SAAA;IAC1C,MAAMkD,UAAA,GAAarB,OAAA,IAAWnF,KAAA,CAAMoF,IAAA,KAAS;IAE7C,MAAMqB,eAAA,GAAkBD,UAAA,IAAc/K,IAAA,CAAK8K,GAAA,CAAID,KAAK,IAAI;IAExD,IAAIG,eAAA,EAAiB;MACnBH,KAAA,GAAQ,KAAK3D,QAAA,GAAW,KAAK7B,OAAA,CAAQ0C,sBAAA;IACvC;IAEA,KAAKkD,QAAA,CAAS,KAAK7D,YAAA,GAAeyD,KAAA,EAAO;MACvCK,YAAA,EAAc;MACd,IAAIrD,SAAA,GACA;QACE5H,IAAA,EAAM+K,eAAA,GAAkB,KAAK3F,OAAA,CAAQyC,aAAA,GAAgB;MACvD,IACA;QACE7H,IAAA,EAAM,KAAKoF,OAAA,CAAQpF,IAAA;QACnBiB,QAAA,EAAU,KAAKmE,OAAA,CAAQnE,QAAA;QACvBC,MAAA,EAAQ,KAAKkE,OAAA,CAAQlE;MACvB;IACN,CAAC;EACH;EAAA;AAAA;AAAA;EAKA2B,OAAA,EAAS;IACP,KAAKyE,UAAA,CAAWzE,MAAA,CAAO;IACvB,KAAKuE,cAAA,GAAiB,KAAKD,YAAA,GAAe,KAAKsB,YAAA;IAC/C,KAAKpE,IAAA,CAAK;EACZ;EAEQA,KAAA,EAAO;IACb,KAAKyB,OAAA,CAAQzB,IAAA,CAAK,UAAU,IAAI;EAClC;EAEQqE,cAAA,GAAiBA,CAAA,KAAM;IAC7B,IAAI,KAAK9B,qBAAA,KAA0B,MAAM;MACvCzE,YAAA,CAAa,KAAKyE,qBAAqB;MACvC,KAAKA,qBAAA,GAAwB;IAC/B;IAEA,IAAI,KAAKD,6BAAA,EAA+B;MACtC,KAAKA,6BAAA,GAAgC;MACrC;IACF;IAEA,IAAI,KAAKgE,WAAA,KAAgB,SAAS,KAAKA,WAAA,KAAgB,UAAU;MAC/D,MAAMO,UAAA,GAAa,KAAK9D,cAAA;MACxB,KAAKA,cAAA,GAAiB,KAAKD,YAAA,GAAe,KAAKsB,YAAA;MAC/C,KAAKzB,YAAA,GAAe,KAAKC,QAAA;MACzB,KAAKA,QAAA,GAAW,KAAKG,cAAA,GAAiB8D,UAAA;MACtC,KAAKhE,SAAA,GAAYnH,IAAA,CAAKoL,IAAA,CACpB,KAAK/D,cAAA,GAAiB8D,UACxB;MACA,KAAKP,WAAA,GAAc;MACnB,KAAKtG,IAAA,CAAK;MAEV,IAAI,KAAK4C,QAAA,KAAa,GAAG;QACvB,KAAKL,qBAAA,GAAwBxE,UAAA,CAAW,MAAM;UAC5C,KAAK4E,YAAA,GAAe,KAAKC,QAAA;UACzB,KAAKA,QAAA,GAAW;UAChB,KAAK0D,WAAA,GAAc;UACnB,KAAKtG,IAAA,CAAK;QACZ,GAAG,GAAG;MACR;IACF;EACF;EAEQgF,MAAA,EAAQ;IACd,KAAKU,QAAA,GAAW;IAChB,KAAKY,WAAA,GAAc;IACnB,KAAKvD,cAAA,GAAiB,KAAKD,YAAA,GAAe,KAAKsB,YAAA;IAC/C,KAAKzB,YAAA,GAAe,KAAKC,QAAA,GAAW;IACpC,KAAKI,OAAA,CAAQ5F,IAAA,CAAK;EACpB;EAAA;AAAA;AAAA;EAKA2J,MAAA,EAAQ;IACN,IAAI,CAAC,KAAKtB,SAAA,EAAW;IACrB,KAAKA,SAAA,GAAY;IAEjB,KAAKT,KAAA,CAAM;EACb;EAAA;AAAA;AAAA;EAKA5H,KAAA,EAAO;IACL,IAAI,KAAKqI,SAAA,EAAW;IACpB,KAAKA,SAAA,GAAY;IACjB,KAAKzC,OAAA,CAAQ5F,IAAA,CAAK;IAElB,KAAK4H,KAAA,CAAM;EACb;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAgC,IAAIvE,IAAA,EAAc;IAChB,MAAMxG,SAAA,GAAYwG,IAAA,IAAQ,KAAKA,IAAA,IAAQA,IAAA;IACvC,KAAKA,IAAA,GAAOA,IAAA;IAEZ,KAAKO,OAAA,CAAQjG,OAAA,CAAQd,SAAA,GAAY,IAAK;EACxC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAsBA0K,SACEM,MAAA,EACA;IACEC,MAAA,GAAS;IACTC,SAAA,GAAY;IACZC,IAAA,GAAO;IACPxK,QAAA,GAAW,KAAKmE,OAAA,CAAQnE,QAAA;IACxBC,MAAA,GAAS,KAAKkE,OAAA,CAAQlE,MAAA;IACtBlB,IAAA,EAAA2B,KAAA,GAAO,KAAKyD,OAAA,CAAQpF,IAAA;IACpB4B,OAAA;IACA8J,UAAA;IACAC,KAAA,GAAQ;IAAA;IACRV,YAAA,GAAe;IAAA;IACflE;EACF,IAAqB,CAAC,GACtB;IACA,KAAK,KAAK+C,SAAA,IAAa,KAAKC,QAAA,KAAa,CAAC4B,KAAA,EAAO;IAGjD,IACE,OAAOL,MAAA,KAAW,YAClB,CAAC,OAAO,QAAQ,OAAO,EAAE3B,QAAA,CAAS2B,MAAM,GACxC;MACAA,MAAA,GAAS;IACX,WACE,OAAOA,MAAA,KAAW,YAClB,CAAC,UAAU,SAAS,KAAK,EAAE3B,QAAA,CAAS2B,MAAM,GAC1C;MACAA,MAAA,GAAS,KAAKpH,KAAA;IAChB,OAAO;MACL,IAAIoG,IAAA;MAEJ,IAAI,OAAOgB,MAAA,KAAW,UAAU;QAE9BhB,IAAA,GAAO9C,QAAA,CAASoE,aAAA,CAAcN,MAAM;MACtC,WAAWA,MAAA,YAAkBf,WAAA,IAAee,MAAA,EAAQO,QAAA,EAAU;QAE5DvB,IAAA,GAAOgB,MAAA;MACT;MAEA,IAAIhB,IAAA,EAAM;QACR,IAAI,KAAKlF,OAAA,CAAQ5C,OAAA,KAAYO,MAAA,EAAQ;UAEnC,MAAM+I,WAAA,GAAc,KAAK7C,WAAA,CAAY8C,qBAAA,CAAsB;UAC3DR,MAAA,IAAU,KAAKvC,YAAA,GAAe8C,WAAA,CAAYE,IAAA,GAAOF,WAAA,CAAYG,GAAA;QAC/D;QAEA,MAAMC,IAAA,GAAO5B,IAAA,CAAKyB,qBAAA,CAAsB;QAExCT,MAAA,IACG,KAAKtC,YAAA,GAAekD,IAAA,CAAKF,IAAA,GAAOE,IAAA,CAAKD,GAAA,IAAO,KAAK7E,cAAA;MACtD;IACF;IAEA,IAAI,OAAOkE,MAAA,KAAW,UAAU;IAEhCA,MAAA,IAAUC,MAAA;IACVD,MAAA,GAASvL,IAAA,CAAKyB,KAAA,CAAM8J,MAAM;IAE1B,IAAI,KAAKlG,OAAA,CAAQ4C,QAAA,EAAU;MACzB,IAAIiD,YAAA,EAAc;QAChB,KAAK9D,YAAA,GAAe,KAAKC,cAAA,GAAiB,KAAK2B,MAAA;MACjD;IACF,OAAO;MACLuC,MAAA,GAAS3L,KAAA,CAAM,GAAG2L,MAAA,EAAQ,KAAKpH,KAAK;IACtC;IAEA,IAAIoH,MAAA,KAAW,KAAKnE,YAAA,EAAc;MAChCvF,OAAA,GAAU,IAAI;MACd8J,UAAA,GAAa,IAAI;MACjB;IACF;IAEA,KAAK3E,QAAA,GAAWA,QAAA,IAAY,CAAC;IAE7B,IAAIyE,SAAA,EAAW;MACb,KAAKpE,cAAA,GAAiB,KAAKD,YAAA,GAAemE,MAAA;MAC1C,KAAKxC,SAAA,CAAU,KAAKC,MAAM;MAC1B,KAAKM,KAAA,CAAM;MACX,KAAK8C,4BAAA,CAA6B;MAClC,KAAK9H,IAAA,CAAK;MACVqH,UAAA,GAAa,IAAI;MACjB,KAAK3E,QAAA,GAAW,CAAC;MACjB;IACF;IAEA,IAAI,CAACkE,YAAA,EAAc;MACjB,KAAK9D,YAAA,GAAemE,MAAA;IACtB;IAEA,KAAKjE,OAAA,CAAQ3F,MAAA,CAAO,KAAK0F,cAAA,EAAgBkE,MAAA,EAAQ;MAC/CrK,QAAA;MACAC,MAAA;MACAlB,IAAA,EAAA2B,KAAA;MACAC,OAAA,EAASA,CAAA,KAAM;QAEb,IAAI6J,IAAA,EAAM,KAAK1B,QAAA,GAAW;QAC1B,KAAKY,WAAA,GAAc;QACnB/I,OAAA,GAAU,IAAI;MAChB;MACAT,QAAA,EAAUA,CAACN,KAAA,EAAeQ,SAAA,KAAuB;QAC/C,KAAKsJ,WAAA,GAAc;QAGnB,KAAK3D,YAAA,GAAe,KAAKC,QAAA;QACzB,KAAKA,QAAA,GAAWpG,KAAA,GAAQ,KAAKuG,cAAA;QAC7B,KAAKF,SAAA,GAAYnH,IAAA,CAAKoL,IAAA,CAAK,KAAKlE,QAAQ;QAExC,KAAKG,cAAA,GAAiBvG,KAAA;QACtB,KAAKiI,SAAA,CAAU,KAAKC,MAAM;QAE1B,IAAIkC,YAAA,EAAc;UAEhB,KAAK9D,YAAA,GAAetG,KAAA;QACtB;QAEA,IAAI,CAACQ,SAAA,EAAW,KAAKgD,IAAA,CAAK;QAE1B,IAAIhD,SAAA,EAAW;UACb,KAAKgI,KAAA,CAAM;UACX,KAAKhF,IAAA,CAAK;UACVqH,UAAA,GAAa,IAAI;UACjB,KAAK3E,QAAA,GAAW,CAAC;UAEjB,KAAKoF,4BAAA,CAA6B;QACpC;MACF;IACF,CAAC;EACH;EAEQA,6BAAA,EAA+B;IACrC,KAAKxF,6BAAA,GAAgC;IAErCyF,qBAAA,CAAsB,MAAM;MAC1B,KAAKzF,6BAAA,GAAgC;IACvC,CAAC;EACH;EAAA;AAAA;AAAA;EAKA,IAAIsC,YAAA,EAAc;IAChB,OACE,KAAK7D,OAAA,CAAQ5C,OAAA,KAAYO,MAAA,GACrByE,QAAA,CAASC,eAAA,GACT,KAAKrC,OAAA,CAAQ5C,OAAA;EAErB;EAAA;AAAA;AAAA;EAKA,IAAI0B,MAAA,EAAQ;IACV,IAAI,KAAKkB,OAAA,CAAQiD,+BAAA,EAAiC;MAChD,IAAI,KAAKW,YAAA,EAAc;QACrB,OAAO,KAAKC,WAAA,CAAYzF,WAAA,GAAc,KAAKyF,WAAA,CAAYjF,WAAA;MACzD,OAAO;QACL,OAAO,KAAKiF,WAAA,CAAY1F,YAAA,GAAe,KAAK0F,WAAA,CAAYhF,YAAA;MAC1D;IACF,OAAO;MACL,OAAO,KAAKqD,UAAA,CAAWpD,KAAA,CAAM,KAAK8E,YAAA,GAAe,MAAM,GAAG;IAC5D;EACF;EAAA;AAAA;AAAA;EAKA,IAAIA,aAAA,EAAe;IACjB,OAAO,KAAK5D,OAAA,CAAQ6C,WAAA,KAAgB;EACtC;EAAA;AAAA;AAAA;EAKA,IAAIQ,aAAA,EAAe;IAEjB,OAAO,KAAKO,YAAA,GACR,KAAKC,WAAA,CAAYC,UAAA,GACjB,KAAKD,WAAA,CAAYE,SAAA;EACvB;EAAA;AAAA;AAAA;EAKA,IAAIJ,OAAA,EAAS;IACX,OAAO,KAAK3D,OAAA,CAAQ4C,QAAA,GAChBxH,MAAA,CAAO,KAAK4G,cAAA,EAAgB,KAAKlD,KAAK,IACtC,KAAKkD,cAAA;EACX;EAAA;AAAA;AAAA;EAKA,IAAIiF,SAAA,EAAW;IAEb,OAAO,KAAKnI,KAAA,KAAU,IAAI,IAAI,KAAK6E,MAAA,GAAS,KAAK7E,KAAA;EACnD;EAAA;AAAA;AAAA;EAKA,IAAIyG,YAAA,EAAc;IAChB,OAAO,KAAKnE,YAAA;EACd;EAEA,IAAYmE,YAAY9J,KAAA,EAAkB;IACxC,IAAI,KAAK2F,YAAA,KAAiB3F,KAAA,EAAO;MAC/B,KAAK2F,YAAA,GAAe3F,KAAA;MACpB,KAAK2H,eAAA,CAAgB;IACvB;EACF;EAAA;AAAA;AAAA;EAKA,IAAIsB,UAAA,EAAY;IACd,OAAO,KAAKrD,UAAA;EACd;EAEA,IAAYqD,UAAUjJ,KAAA,EAAgB;IACpC,IAAI,KAAK4F,UAAA,KAAe5F,KAAA,EAAO;MAC7B,KAAK4F,UAAA,GAAa5F,KAAA;MAClB,KAAK2H,eAAA,CAAgB;IACvB;EACF;EAAA;AAAA;AAAA;EAKA,IAAIuB,SAAA,EAAW;IACb,OAAO,KAAKrD,SAAA;EACd;EAEA,IAAYqD,SAASlJ,KAAA,EAAgB;IACnC,IAAI,KAAK6F,SAAA,KAAc7F,KAAA,EAAO;MAC5B,KAAK6F,SAAA,GAAY7F,KAAA;MACjB,KAAK2H,eAAA,CAAgB;IACvB;EACF;EAAA;AAAA;AAAA;EAKA,IAAIkC,SAAA,EAAW;IACb,OAAO,KAAKC,WAAA,KAAgB;EAC9B;EAAA;AAAA;AAAA;EAKA,IAAI2B,UAAA,EAAY;IACd,IAAIA,SAAA,GAAY;IAChB,IAAI,KAAKxC,SAAA,EAAWwC,SAAA,IAAa;IACjC,IAAI,KAAKvC,QAAA,EAAUuC,SAAA,IAAa;IAChC,IAAI,KAAK3B,WAAA,EAAa2B,SAAA,IAAa;IACnC,IAAI,KAAK3B,WAAA,KAAgB,UAAU2B,SAAA,IAAa;IAChD,OAAOA,SAAA;EACT;EAEQ9D,gBAAA,EAAkB;IACxB,KAAKK,gBAAA,CAAiB;IAEtB,KAAKI,WAAA,CAAYqD,SAAA,GACf,GAAG,KAAKrD,WAAA,CAAYqD,SAAS,IAAI,KAAKA,SAAS,GAAGC,IAAA,CAAK;EAC3D;EAEQ1D,iBAAA,EAAmB;IACzB,KAAKI,WAAA,CAAYqD,SAAA,GAAY,KAAKrD,WAAA,CAAYqD,SAAA,CAC3CE,OAAA,CAAQ,iBAAiB,EAAE,EAC3BD,IAAA,CAAK;EACV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}